import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calculator, Plus, Trash2, FileText } from 'lucide-react';
import jsPDF from 'jspdf';
interface BoardCalculation {
  id: number;
  length: number;
  lengthUnit: string;
  width: number;
  widthUnit: string;
  thickness: number;
  thicknessUnit: string;
  quantity: number;
  boardFeet: number;
}
const BoardFootCalculator = () => {
  const [calculations, setCalculations] = useState<BoardCalculation[]>([{
    id: 1,
    length: 0,
    lengthUnit: 'ft',
    width: 0,
    widthUnit: 'in',
    thickness: 0,
    thicknessUnit: 'in',
    quantity: 1,
    boardFeet: 0
  }]);
  const [pricePerBoardFoot, setPricePerBoardFoot] = useState<number>(0);
  const convertToInches = (value: number, unit: string): number => {
    switch (unit) {
      case 'ft':
        return value * 12;
      case 'in':
        return value;
      default:
        return value;
    }
  };
  const calculateBoardFeet = (length: number, lengthUnit: string, width: number, widthUnit: string, thickness: number, thicknessUnit: string, quantity: number): number => {
    const lengthInInches = convertToInches(length, lengthUnit);
    const widthInInches = convertToInches(width, widthUnit);
    const thicknessInInches = convertToInches(thickness, thicknessUnit);
    return lengthInInches * widthInInches * thicknessInInches * quantity / 144;
  };
  const updateCalculation = (id: number, field: keyof BoardCalculation, value: number | string) => {
    setCalculations(prev => prev.map(calc => {
      if (calc.id === id) {
        const updated = {
          ...calc,
          [field]: value
        };
        if (field !== 'boardFeet') {
          updated.boardFeet = calculateBoardFeet(updated.length, updated.lengthUnit, updated.width, updated.widthUnit, updated.thickness, updated.thicknessUnit, updated.quantity);
        }
        return updated;
      }
      return calc;
    }));
  };
  const addCalculation = () => {
    const newId = Math.max(...calculations.map(c => c.id)) + 1;
    setCalculations(prev => [...prev, {
      id: newId,
      length: 0,
      lengthUnit: 'ft',
      width: 0,
      widthUnit: 'in',
      thickness: 0,
      thicknessUnit: 'in',
      quantity: 1,
      boardFeet: 0
    }]);
  };
  const removeCalculation = (id: number) => {
    if (calculations.length > 1) {
      setCalculations(prev => prev.filter(calc => calc.id !== id));
    }
  };
  const formatDimensions = (calc: BoardCalculation): string => {
    const length = calc.lengthUnit === 'ft' ? `${calc.length}'` : `${calc.length}"`;
    const width = calc.widthUnit === 'ft' ? `${calc.width}'` : `${calc.width}"`;
    const thickness = `${calc.thickness}"`;
    return `${length} × ${width} × ${thickness}`;
  };
  const generateProfessionalPDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const margin = 20;
    let currentY = 30;

    // Header with company branding
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(24);
    doc.setTextColor(101, 67, 33); // Sawmill brown color
    doc.text('LUMBER CALCULATION RECEIPT', pageWidth / 2, currentY, {
      align: 'center'
    });
    currentY += 10;
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Generated by Board Foot Calculator', pageWidth / 2, currentY, {
      align: 'center'
    });
    currentY += 8;
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Powered by MilledRight Sawmill Technology', pageWidth / 2, currentY, {
      align: 'center'
    });

    // Horizontal line
    currentY += 15;
    doc.setDrawColor(101, 67, 33);
    doc.setLineWidth(0.8);
    doc.line(margin, currentY, pageWidth - margin, currentY);
    currentY += 20;

    // Important Disclaimers
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.setTextColor(180, 0, 0);
    doc.text('IMPORTANT DISCLAIMERS:', margin, currentY);
    currentY += 10;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(9);
    doc.setTextColor(0, 0, 0);
    const disclaimers = ['• This document is a CALCULATION RECEIPT, not an invoice or quote', '• This tool may be used by any lumber operator or individual', '• Calculations are estimates only - verify all measurements independently', '• Final pricing may vary based on actual wood selection and market conditions', '• Not affiliated with any specific lumber supplier unless otherwise noted'];
    disclaimers.forEach(disclaimer => {
      doc.text(disclaimer, margin, currentY);
      currentY += 8;
    });
    currentY += 10;

    // Date and receipt info
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    const currentDate = new Date();
    const dateString = currentDate.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    doc.text(`Generated: ${dateString}`, margin, currentY);
    doc.text(`Reference #: BF-${Date.now().toString().slice(-6)}`, pageWidth - margin, currentY, {
      align: 'right'
    });
    currentY += 25;

    // Table header
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(9);
    doc.setFillColor(240, 240, 240);
    doc.rect(margin, currentY - 8, pageWidth - 2 * margin, 12, 'F');
    const colWidths = [15, 45, 25, 20, 25, 30];
    const colX = [margin + 5];
    for (let i = 1; i < colWidths.length; i++) {
      colX.push(colX[i - 1] + colWidths[i - 1]);
    }
    doc.text('#', colX[0], currentY);
    doc.text('DIMENSIONS', colX[1], currentY);
    doc.text('QTY', colX[2], currentY);
    doc.text('UNIT BF', colX[3], currentY);
    doc.text('TOTAL BF', colX[4], currentY);
    if (pricePerBoardFoot > 0) {
      doc.text('SUBTOTAL', colX[5], currentY);
    }
    currentY += 15;

    // Table rows
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
    let itemNumber = 1;
    calculations.forEach(calc => {
      if (calc.boardFeet > 0) {
        // Draw alternating row background
        if (itemNumber % 2 === 0) {
          doc.setFillColor(248, 248, 248);
          doc.rect(margin, currentY - 6, pageWidth - 2 * margin, 10, 'F');
        }
        doc.setTextColor(0, 0, 0);
        doc.text(itemNumber.toString(), colX[0], currentY);
        doc.text(formatDimensions(calc), colX[1], currentY);
        doc.text(calc.quantity.toString(), colX[2], currentY);
        doc.text((calc.boardFeet / calc.quantity).toFixed(2), colX[3], currentY);
        doc.text(calc.boardFeet.toFixed(2), colX[4], currentY);
        if (pricePerBoardFoot > 0) {
          const itemTotal = calc.boardFeet * pricePerBoardFoot;
          doc.text(`$${itemTotal.toFixed(2)}`, colX[5], currentY);
        }
        currentY += 12;
        itemNumber++;
      }
    });

    // Summary section
    currentY += 10;
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.3);
    doc.line(margin, currentY, pageWidth - margin, currentY);
    currentY += 15;

    // Totals
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(11);
    const summaryX = pageWidth - 80;
    doc.text('TOTAL BOARD FEET:', summaryX - 50, currentY);
    doc.text(`${totalBoardFeet.toFixed(2)} BF`, summaryX + 20, currentY, {
      align: 'right'
    });
    if (pricePerBoardFoot > 0) {
      currentY += 12;
      doc.text('PRICE PER BOARD FOOT:', summaryX - 50, currentY);
      doc.text(`$${pricePerBoardFoot.toFixed(2)}`, summaryX + 20, currentY, {
        align: 'right'
      });
      currentY += 12;
      doc.setFontSize(14);
      doc.setTextColor(101, 67, 33);
      doc.text('ESTIMATED TOTAL:', summaryX - 50, currentY);
      doc.text(`$${totalPrice.toFixed(2)}`, summaryX + 20, currentY, {
        align: 'right'
      });
    }

    // Footer
    currentY += 30;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text('This calculation tool is provided as-is for estimation purposes only.', pageWidth / 2, currentY, {
      align: 'center'
    });
    currentY += 8;
    doc.text('Always verify measurements and pricing with your lumber supplier.', pageWidth / 2, currentY, {
      align: 'center'
    });

    // Add a subtle border around the entire receipt
    doc.setDrawColor(101, 67, 33);
    doc.setLineWidth(1.5);
    doc.rect(15, 15, pageWidth - 30, currentY + 15);

    // Save the PDF
    const fileName = `Lumber-Calculation-Receipt-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  };
  const totalBoardFeet = calculations.reduce((sum, calc) => sum + calc.boardFeet, 0);
  const totalPrice = totalBoardFeet * pricePerBoardFoot;
  return <div className="space-y-6 px-4 lg:px-0">
      {/* Main Calculator Card */}
      <Card className="shadow-2xl border-0 bg-gradient-to-br from-white via-gray-50 to-gray-100 relative overflow-hidden">
        {/* Renegade accent lines */}
        <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-red-600 via-orange-500 to-yellow-500"></div>
        <div className="absolute bottom-0 right-0 w-32 h-32 bg-gradient-to-tl from-red-600/10 to-transparent rounded-full -mb-16 -mr-16"></div>
        
        <CardHeader className="bg-gradient-to-r from-gray-900 via-gray-800 to-black text-white rounded-t-lg relative overflow-hidden">
          {/* Industrial grid pattern */}
          <div className="absolute inset-0 opacity-10">
            <div className="absolute inset-0" style={{
            backgroundImage: `repeating-linear-gradient(
                0deg,
                transparent,
                transparent 20px,
                rgba(255,255,255,0.1) 20px,
                rgba(255,255,255,0.1) 21px
              ),
              repeating-linear-gradient(
                90deg,
                transparent,
                transparent 20px,
                rgba(255,255,255,0.1) 20px,
                rgba(255,255,255,0.1) 21px
              )`
          }}></div>
          </div>
          
          <CardTitle className="flex flex-col lg:flex-row items-start lg:items-center justify-between relative z-10 gap-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-gradient-to-br from-red-500 to-orange-600 rounded-lg">
                <Calculator className="h-5 w-5 lg:h-6 lg:w-6 text-white" />
              </div>
              <div>
                <span className="text-lg lg:text-xl font-bold tracking-wide">BOARD FOOT CALCULATOR</span>
                <div className="text-xs lg:text-sm text-red-300 font-mono tracking-wider">PRECISION LUMBER CALCULATIONS</div>
              </div>
            </div>
            <Button variant="outline" size="sm" onClick={generateProfessionalPDF} disabled={totalBoardFeet === 0} className="bg-gradient-to-r from-red-600 to-orange-600 border-red-400 text-white hover:from-red-700 hover:to-orange-700 disabled:opacity-50 font-bold shadow-lg transform hover:scale-105 transition-all duration-200 w-full lg:w-auto">
              <FileText className="h-4 w-4 mr-1" />
              <span className="hidden sm:inline">EXPORT RECEIPT</span>
              <span className="sm:hidden">EXPORT</span>
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6 p-4 lg:p-8 relative">
          {calculations.map((calc, index) => <div key={calc.id} className="p-4 lg:p-6 border-2 border-gray-300 rounded-xl bg-gradient-to-br from-white via-gray-50 to-gray-100 hover:border-red-400 transition-all duration-300 shadow-lg relative overflow-hidden">
              {/* Industrial corner accents */}
              <div className="absolute top-0 left-0 w-6 h-6 lg:w-8 lg:h-8 border-l-4 border-t-4 border-red-500"></div>
              <div className="absolute bottom-0 right-0 w-6 h-6 lg:w-8 lg:h-8 border-r-4 border-b-4 border-orange-500"></div>
              
              <div className="flex justify-between items-center mb-4 lg:mb-6">
                <h4 className="text-base lg:text-lg font-bold text-gray-900 tracking-wide">LUMBER PIECE #{index + 1}</h4>
                {calculations.length > 1 && <Button variant="outline" size="sm" onClick={() => removeCalculation(calc.id)} className="text-red-600 hover:text-red-700 hover:bg-red-50 border-red-300 font-bold">
                    <Trash2 className="h-4 w-4" />
                  </Button>}
              </div>
              
              <div className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  {/* Length */}
                  <div className="space-y-2">
                    <Label htmlFor={`length-${calc.id}`} className="text-sm font-bold text-gray-700 tracking-wide">LENGTH</Label>
                    <div className="flex gap-2">
                      <Input id={`length-${calc.id}`} type="number" min="0" step="0.25" value={calc.length || ''} onChange={e => updateCalculation(calc.id, 'length', parseFloat(e.target.value) || 0)} placeholder="8" className="flex-1 border-2 border-gray-400 focus:border-red-500 focus:ring-red-500 font-mono text-base" />
                      <Select value={calc.lengthUnit} onValueChange={value => updateCalculation(calc.id, 'lengthUnit', value)}>
                        <SelectTrigger className="w-16 border-2 border-gray-400 font-bold">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="ft">ft</SelectItem>
                          <SelectItem value="in">in</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  {/* Width */}
                  <div className="space-y-2">
                    <Label htmlFor={`width-${calc.id}`} className="text-sm font-bold text-gray-700 tracking-wide">WIDTH</Label>
                    <div className="flex gap-2">
                      <Input id={`width-${calc.id}`} type="number" min="0" step="0.25" value={calc.width || ''} onChange={e => updateCalculation(calc.id, 'width', parseFloat(e.target.value) || 0)} placeholder="6" className="flex-1 border-2 border-gray-400 focus:border-red-500 focus:ring-red-500 font-mono text-base" />
                      <Select value={calc.widthUnit} onValueChange={value => updateCalculation(calc.id, 'widthUnit', value)}>
                        <SelectTrigger className="w-16 border-2 border-gray-400 font-bold">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="ft">ft</SelectItem>
                          <SelectItem value="in">in</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  {/* Thickness */}
                  <div className="space-y-2">
                    <Label htmlFor={`thickness-${calc.id}`} className="text-sm font-bold text-gray-700 tracking-wide">THICKNESS</Label>
                    <div className="flex gap-2">
                      <Input id={`thickness-${calc.id}`} type="number" min="0" step="0.125" value={calc.thickness || ''} onChange={e => updateCalculation(calc.id, 'thickness', parseFloat(e.target.value) || 0)} placeholder="1" className="flex-1 border-2 border-gray-400 focus:border-red-500 focus:ring-red-500 font-mono text-base" />
                      <Select value={calc.thicknessUnit} onValueChange={value => updateCalculation(calc.id, 'thicknessUnit', value)}>
                        <SelectTrigger className="w-16 border-2 border-gray-400 font-bold">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="in">in</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  {/* Quantity */}
                  <div className="space-y-2">
                    <Label htmlFor={`quantity-${calc.id}`} className="text-sm font-bold text-gray-700 tracking-wide">QUANTITY</Label>
                    <Input id={`quantity-${calc.id}`} type="number" min="1" value={calc.quantity || 1} onChange={e => updateCalculation(calc.id, 'quantity', parseInt(e.target.value) || 1)} className="border-2 border-gray-400 focus:border-red-500 focus:ring-red-500 font-mono text-base" />
                  </div>
                </div>
                
                {/* Board Feet Result */}
                <div className="bg-gradient-to-r from-red-500/20 via-orange-500/20 to-yellow-500/20 p-4 rounded-lg border-2 border-red-300 relative overflow-hidden">
                  <div className="absolute inset-0 bg-gradient-to-r from-red-500/5 to-orange-500/5"></div>
                  <Label className="text-sm font-bold text-gray-900 tracking-wide relative z-10">CALCULATED BOARD FEET</Label>
                  <div className="text-2xl lg:text-3xl font-black text-gray-900 mt-1 font-mono tracking-wider relative z-10">
                    {calc.boardFeet.toFixed(2)} <span className="text-lg lg:text-xl text-red-600">BF</span>
                  </div>
                </div>
              </div>
            </div>)}
          
          <Button onClick={addCalculation} variant="outline" className="w-full border-2 border-dashed border-red-400 hover:border-red-600 py-4 text-base tracking-wide transform hover:scale-[1.02] transition-all duration-200 lg:text-xl text-slate-50 rounded-full font-normal bg-slate-900 hover:bg-slate-800">
            <Plus className="h-5 w-5 mr-2 text-red-600" />
            ADD ANOTHER PIECE
          </Button>
          
          {/* Summary Section */}
          <div className="border-t-4 border-gray-900 pt-6 lg:pt-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8">
              <div className="space-y-4">
                <Label htmlFor="price-per-bf" className="text-base lg:text-lg font-bold text-gray-700 tracking-wide">PRICE PER BOARD FOOT (OPTIONAL)</Label>
                <Input id="price-per-bf" type="number" min="0" step="0.01" value={pricePerBoardFoot || ''} onChange={e => setPricePerBoardFoot(parseFloat(e.target.value) || 0)} placeholder="5.50" className="text-base lg:text-lg p-3 lg:p-4 border-2 border-gray-400 focus:border-red-500 focus:ring-red-500 font-mono" />
              </div>
              
              <div className="space-y-4">
                <div className="bg-gradient-to-r from-gray-900 via-gray-800 to-black text-white p-4 lg:p-6 rounded-xl relative overflow-hidden shadow-2xl">
                  {/* Industrial pattern overlay */}
                  <div className="absolute inset-0 opacity-10">
                    <div className="absolute inset-0" style={{
                    backgroundImage: `conic-gradient(from 45deg, transparent 30%, rgba(255,0,0,0.3) 50%, transparent 70%)`
                  }}></div>
                  </div>
                  
                  <div className="flex justify-between items-center text-lg lg:text-xl font-bold mb-2 relative z-10">
                    <span className="tracking-wide">TOTAL BOARD FEET:</span>
                    <span className="text-red-400 font-mono text-xl lg:text-2xl">{totalBoardFeet.toFixed(2)} BF</span>
                  </div>
                  {pricePerBoardFoot > 0 && <div className="flex justify-between items-center text-lg lg:text-xl font-bold relative z-10">
                      <span className="tracking-wide">ESTIMATED COST:</span>
                      <span className="text-orange-400 font-mono text-xl lg:text-2xl">${totalPrice.toFixed(2)}</span>
                    </div>}
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>;
};
export default BoardFootCalculator;